{"name":"Nancy","body":"# Nancy\r\n_Sinatra's little daughter_\r\n\r\n![Frank and Nancy by classic film scans](http://farm6.staticflickr.com/5212/5386187897_e3155cec68.jpg)\r\n\r\n\r\n## Description\r\n\r\nMinimal Ruby microframework for web development inspired in [Sinatra](http://www.sinatrarb.com/) and [Cuba](https://github.com/soveran/cuba)\r\n\r\n\r\n## Installation\r\n\r\nInstall the gem:\r\n\r\n    $ gem install nancy\r\n\r\nor add it to your Gemfile:\r\n\r\n    gem \"nancy\"\r\n\r\n\r\n## Usage\r\n\r\nHere's a simple application:\r\n\r\n```ruby\r\n# hello.rb\r\nrequire \"nancy\"\r\n\r\nclass Hello < Nancy::Base\r\n  use Rack::Session::Cookie # for sessions\r\n  include Nancy::Render # for templates\r\n\r\n  get \"/\" do\r\n    \"Hello World\"\r\n  end\r\n\r\n  get \"/hello\" do\r\n    redirect \"/\"\r\n  end\r\n\r\n  get \"/hello/:name\" do\r\n    \"Hello #{params['name']}\"\r\n  end\r\n\r\n  post \"/hello\" do\r\n    \"Hello #{params['name']}\"\r\n  end\r\n\r\n  get \"/template\" do\r\n    @message = \"Hello world\"\r\n    render(\"views/hello.erb\")\r\n  end\r\n\r\n  post \"/login\" do\r\n    @user = User.find(params['username'])\r\n    halt 401, \"unauthorized\" unless @user.authenticate(params['password'])\r\n    session[:authenticated] = true\r\n    render(\"views/layout.erb\") { render(\"views/welcome.erb\") }\r\n  end\r\n\r\n  get \"/users/:id.json\" do\r\n    @user = User.find(params['id'])\r\n    response[\"Content-Type\"] = \"application/json\"\r\n    halt 404 unless @user\r\n    UserSerializer.new(@user).to_json\r\n  end\r\n\r\n  map \"/resque\" do\r\n    run Resque::Server\r\n  end\r\n\r\n  map \"/nancy\" do\r\n    run AnotherNancyApp\r\n  end\r\nend\r\n```\r\n\r\nTo run it, you can create a `config.ru` file:\r\n\r\n```ruby\r\n# config.ru\r\nrequire \"./hello\"\r\n\r\nrun Hello\r\n```\r\n\r\nYou can now run `rackup` and enjoy what you have just created.\r\n\r\nCheck examples folder for a detailed example.\r\n\r\n\r\n## Features\r\n\r\n*  \"Sinatra-like\" routes: support for get, post, put, patch, delete, options, head\r\n*  Template rendering and caching through Tilt\r\n*  Include middlewares with the use method\r\n*  Mount rack apps with the map method\r\n*  Sessions through Rack::Session\r\n*  Halt execution at any point using Ruby's throw/catch mechanism\r\n*  Thread-safe\r\n\r\n\r\n## Version history\r\n\r\n### 0.2.0 (April 12, 2012)\r\n\r\n*   Set PATH INFO to '/' when is blank\r\n*   Fixed session method: Raise error when is used but Rack::Session isn't present\r\n*   Added support for HEAD and OPTIONS HTTP verbs\r\n*   Refactored Base.use to use a Rack::Builder internally\r\n*   Added Base.map to redirect requests to Rack sub-apps\r\n\r\n### 0.1.0 (April 4, 2012)\r\n\r\n*   Created a new [Github Page](http://guilleiguaran.github.com/nancy) for the project\r\n*   Added env accessor, this add support for [Shield](https://github.com/cyx/shield)\r\n*   Added support for templates caching using Tilt::Cache\r\n*   Moved render method from Nancy::Base to Nancy::Render module\r\n*   Refactored Nancy::Base to evaluate code blocks at instance level\r\n*   Fixed passing of render options to Tilt (thanks to [lporras](https://github.com/lporras))\r\n\r\n### 0.0.1 (March 20, 2012)\r\n\r\n*   Initial Release\r\n\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n\r\n## Copyright\r\n\r\nCopyright (c) 2012 Guillermo Iguaran. See LICENSE for\r\nfurther details.\r\n","tagline":"Ruby microframework for web development.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}